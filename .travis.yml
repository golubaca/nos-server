# Use new container infrastructure to enable caching
sudo: required
dist: bionic

# language is go
language: go
go:
  - "1.14"
go_import_path: github.com/golubaca/nos-server

addons:
  apt:
    sources:
      - sourceline: 'deb http://security.ubuntu.com/ubuntu xenial-security main'
      
    packages:
      - build-essential
      - cmake
      - unzip
      - pkg-config
      - libjpeg-dev
      - libpng-dev
      - libtiff-dev
      - libjasper-dev
      - libavcodec-dev
      - libavformat-dev
      - libswscale-dev
      - libv4l-dev
      - libxvidcore-dev
      - libx264-dev
      - libgtk-3-dev
      - libatlas-base-dev
      - gfortran

before_install:
  - ./travis_build_opencv.sh
  - export PKG_CONFIG_PATH=$(pkg-config --variable pc_path pkg-config):$HOME/usr/lib/pkgconfig
  - export INCLUDE_PATH=$HOME/usr/include:${INCLUDE_PATH}
  - export LD_LIBRARY_PATH=$HOME/usr/lib:${LD_LIBRARY_PATH}
  - sudo ln /dev/null /dev/raw1394
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start

before_cache:
  - rm -f $HOME/fresh-cache

script:
  - go get -u -d gocv.io/x/gocv
  - cd $GOPATH/src/gocv.io/x/gocv
  - export GOCV_CAFFE_TEST_FILES="${HOME}/testdata"
  - export GOCV_TENSORFLOW_TEST_FILES="${HOME}/testdata"
  - export OPENCV_ENABLE_NONFREE=ON
  - echo "Ensuring code is well formatted"; ! gofmt -s -d . | read
  - go test -tags matprofile -v .
  - go test -tags matprofile -v ./contrib

after_success:
  - echo "Success"

# Caching so the next build will be fast as possible.
cache:
  timeout: 1000
  directories:
    - $HOME/usr
    - $HOME/testdata
